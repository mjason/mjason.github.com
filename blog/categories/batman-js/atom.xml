<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: batman.js | 天涯望帆]]></title>
  <link href="http://mjason.github.com/blog/categories/batman-js/atom.xml" rel="self"/>
  <link href="http://mjason.github.com/"/>
  <updated>2013-02-24T23:15:02+08:00</updated>
  <id>http://mjason.github.com/</id>
  <author>
    <name><![CDATA[MJ（天涯望帆）]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[batman.js 结合rails 入门]]></title>
    <link href="http://mjason.github.com/blog/2013/02/24/batman-dot-js-jie-he-rails-ru-men/"/>
    <updated>2013-02-24T19:10:00+08:00</updated>
    <id>http://mjason.github.com/blog/2013/02/24/batman-dot-js-jie-he-rails-ru-men</id>
    <content type="html"><![CDATA[<p>batman.js 是一个很令人兴奋的前端mvc框架，不过文档是硬伤，外文资料少的可怜，中文资料更是一个悲剧!<br/>
这几天因为一个项目需要用到大量ajax，所以有一个想法用前端mvc来做一个整站的ajax，我看了backbone.js spine.js ember.js 等前端mvc，可是他们各自硬伤啊</p>

<ol>
<li>banbone.js 他的mvc让我感到陌生，从django到rails等web mvc我没看到这么样的mvc，十分复杂，而且让我写出来的代码不可控制</li>
<li>ember.js 他是一个很好的框架，可是依赖让我却步，比如你得使用jquery低版本，这是我没法接受的，而且ember太大了，文档也不是很好</li>
<li>spine.js 是一个很好的框架，例子和文档都很好，可是他却不能实时更新ui</li>
</ol>


<p>所以我选择baman.js, 不过这东西会让初学者感到沮丧，因为没有一个好的教程，而且官网文档也少得可怜, 有一个和rails结合的例子，可是作者又是haml拥戴者（这～～）硬着头皮看完，并且看了文档，写一下日志，方便自己以后查看</p>

<p>这里使用rails作为后端</p>

<h1>install</h1>

<p>在Gemfilel里面添加</p>

<p><code>ruby
gem 'batman-rails'
</code>
安装目录结构
<code>
rails g batman:install
</code>
因为我们要使用mvc，所以我们最好关闭掉rails的自动生成coffeescipt
在application.rb添加</p>

<p>config.generators.javascripts = false</p>

<p>如果你想把自动生成scss的功能也给关掉可以继续添加上</p>

<p>config.generators.stylesheets = false <br/>
这样我们的基础工作就算ok了</p>

<h1>来一个demo吧！</h1>

<p>最简单也是最好用的一个demo就是写一个blog吧，这里我们用一个blog来开始我们的batman之旅，这个blog有这么几个要求：<br/>
1. 文章要有标题，内容和图片
2. 无刷新，整站使用ajax</p>

<h2>ruby</h2>

<p>我们需要使用使用基础的命令来生成一个项目
<code>
rails new blog
</code>
在我们Gemfile里面添加上
<code>ruby
gem 'batman-rails'
gem 'carrierwave' #因为我们需要进行图片上传
gem 'bootstrap-sass', '~&gt; 2.2.2.0' # 为了让我们的demo好看点，我们用这个吧
</code></p>

<p>使用bundle进行gem的安装</p>

<p>之后我们先把自动生产javascipt的功能关掉
在application.rb添加<br/>
config.generators.javascripts = false</p>

<p>生成我们需要的api，这里因为我们需要快速完成，使用scaffold
<code>
rails g scaffold post title:string content:text image:string
</code></p>

<p>然后我们运行migrate来生成数据库
<code>
rake db:migrate
</code></p>

<p>现在生成root首页
<code>
rails g controller home index
</code></p>

<p>删除public/index.html，并且把app/views/home/index.html.erb 清空</p>

<p>添加root路由
config/routes.rb
<code>ruby
BatmatBlog::Application.routes.draw do
  root to: "home#index"
  resources :pots
end
</code></p>

<p>安装batman
```
rails g batman:install</p>

<h1>在javascipt里面创建views目录</h1>

<p>mkdir app/assets/javascipts/views
```</p>

<p>修改application.css 为application.css.scss
添加以下内容
```scss
/<em>
 </em>= require_self
 <em>= require_tree .
 </em>/</p>

<p>@import "bootstrap";</p>

<p>```</p>

<p>在application.js添加以下内容
```js
//= require jquery
//= require jquery_ujs
//= require bootstrap</p>

<p>// Batman.js and its adapters
//= require batman/es5-shim
//= require batman/batman
//= require batman/batman.jquery
//= require batman/batman.rails</p>

<p>//= require batmat_blog</p>

<p>//= require_tree ./models
//= require_tree ./controllers
//= require_tree ./helpers</p>

<p>//= require_tree .
// Run the Batman app
$(document).ready(function(){
  BatmatBlog.run();
});
```</p>

<p>因为我们需要上传文件，所以我们需要使用carrierwave来做
<code>
rails generate uploader image
</code></p>

<p>修改model<br/>
app/models/post.rb
<code>ruby
class Post &lt; ActiveRecord::Base
  attr_accessible :content, :image, :title
  mount_uploader :image, ImageUploader
end
</code></p>

<p>好了接下来我们需要进入batman，batman也为了我们准备了很多很有用生成器
<code>
Batman:
  batman:controller
  batman:helper
  batman:install
  batman:model
  batman:scaffold
</code>
我们使用batman:scaffold来创建我们需要的东西，也方便我们熟悉batman的写法
<code>
rails g batman:scaffold post
</code></p>

<h2>batman</h2>

<p>打开app/assets/javascipts/post.js
```coffeescript
class BatmatBlog.Post extends Batman.Model
  @storageKey: 'posts'
  @persist Batman.RailsStorage</p>

<p>  @encode "title", "content", "image"
```</p>

<p>下面解释一下上面几个东西，因为我的英语翻译确实比较烂，所以还是直接引用英文了</p>

<p><code>
@storageKey is a class level option which gives the storage adapters something to interpolate into their specific key generation schemes. In the case of LocalStorage or SessionStorage adapters, the storageKey defines what namespace to store this record under in the localStorage or sessionStorage host objects, and with the case of the RestStorage family of adapters, the storageKey assists in URL generation. See the documentation for the storage adapter of your choice for more information.
The default storageKey is null.
</code></p>

<p><code>
@persist is how a Model subclass is told to persist itself by means of a StorageAdapter. @persist accepts either a StorageAdapter class or instance and will return either the instantiated class or the instance passed to it for further modification.
</code></p>

<p><code>
@encode specifies a list of keys a model should expect from and send back to a storage adapter, and any transforms to apply to those attributes as they enter and exit the world of Batman in the optional encoderObject.
The encoderObject should have an encode and/or a decode key which point to functions. The functions accept the "raw" data (the Batman land value in the case of encode, and the backend land value in the case of decode), and should return the data suitable for the other side of the link. The functions should have the following signatures
</code></p>

<p>接下来我们进入controller</p>

<p>我们可以看到batman为我们生成了基本的index show create update</p>

<p>不过我们因为需要有一个get action来生成new和edit
所以我们加上这两个方法，代码就如下面这个样子:
```coffeescript
class BatmatBlog.PostsController extends Batman.Controller
  index: (params) -></p>

<p>  show: (params) -></p>

<p>  new: (params) -></p>

<p>  create: (params) -></p>

<p>  edit: (params) -></p>

<p>  update: (params) -></p>

<p>  destroy: (params) ->
```
现在先放着，不写实现先，我们需要写路由了
这个时候，可以说说路由在那里实现了，我们看以我们项目名称命名的coffee文件
app/assets/javascipts/batmat_blog.js.coffee</p>

<p>```coffeescript
window.BatmatBlog = class BatmatBlog extends Batman.App</p>

<p>  # @root 'controller#all'
  # @route '/controller/:id', 'controller#show', resource: 'model', action: 'show'</p>

<p>  @on 'run', -></p>

<pre><code>console?.log "Running ...."
</code></pre>

<p>  @on 'ready', -></p>

<pre><code>console?.log "BatmatBlog ready for use."
</code></pre>

<p>  @flash: Batman()
  @flash.accessor</p>

<pre><code>get: (key) -&gt; @[key]
set: (key, value) -&gt;
  @[key] = value
  if value isnt ''
    setTimeout =&gt;
      @set(key, '')
    , 2000
  value
</code></pre>

<p>  @flashSuccess: (message) -> @set 'flash.success', message
  @flashError: (message) ->  @set 'flash.error', message
```</p>
]]></content>
  </entry>
  
</feed>
